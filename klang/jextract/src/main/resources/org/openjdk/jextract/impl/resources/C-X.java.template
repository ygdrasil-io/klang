// Generated by jextract

import java.lang.invoke.VarHandle;
import java.lang.foreign.MemoryAccess;
import java.lang.foreign.MemoryAddress;
import java.lang.foreign.MemoryCopy;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import static java.lang.foreign.CLinker.*;

public class C-X {
    C-X() {}

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(LAYOUT);
    }

    public static MemorySegment allocate(${CARRIER} val, SegmentAllocator allocator) {
        MemorySegment segment = allocator.allocate(LAYOUT);
        MemoryAccess.set${CAPITALIZED_CARRIER}AtOffset(segment, 0, val);
        return segment;
    }

    public static MemorySegment allocateArray(long size, SegmentAllocator allocator) {
        return allocator.allocateArray(LAYOUT, size);
    }

    public static MemorySegment allocateArray(${CARRIER}[] values, SegmentAllocator allocator) {
        MemorySegment segment = allocator.allocateArray(LAYOUT, values.length);
        MemoryCopy.copyFromArray(values, 0, values.length, segment, 0);
        return segment;
    }
    
    public static ${CARRIER} get(MemorySegment segment, long offset) {
        return MemoryAccess.get${CAPITALIZED_CARRIER}AtOffset(segment, offset);
    }

    public static void set(MemorySegment segment, long offset, ${CARRIER} value) {
        MemoryAccess.set${CAPITALIZED_CARRIER}AtOffset(segment, offset, value);
    }

    public static long sizeof() {
        return LAYOUT.byteSize();
    }

    public static ${CARRIER}[] toJavaArray(MemorySegment seg) {
        var segSize = seg.byteSize();
        var elemSize = sizeof();
        if (segSize % elemSize != 0) {
            throw new UnsupportedOperationException("segment cannot contain integral number of elements");
        }
        ${CARRIER}[] array = new ${CARRIER}[(int) (segSize / elemSize)];
        MemoryCopy.copyToArray(seg, 0, array, 0, array.length);
        return array;
    }

    public static final MemoryLayout LAYOUT = ${LAYOUT};
}
