TranslationUnitDecl 0x5558378f2058 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5558378f28c0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5558378f2620 '__int128'
|-TypedefDecl 0x5558378f2930 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5558378f2640 'unsigned __int128'
|-TypedefDecl 0x5558378f2ca8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x5558378f2a20 '__NSConstantString_tag'
|   `-CXXRecord 0x5558378f2988 '__NSConstantString_tag'
|-TypedefDecl 0x5558378f2d40 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5558378f2d00 'char *'
|   `-BuiltinType 0x5558378f2100 'char'
|-TypedefDecl 0x555837939278 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag[1]'
| `-ConstantArrayType 0x555837939220 '__va_list_tag[1]' 1 
|   `-RecordType 0x5558378f2e30 '__va_list_tag'
|     `-CXXRecord 0x5558378f2d98 '__va_list_tag'
`-ClassTemplateDecl 0x555837939420 </workspace/class.hpp:2:1, line:23:1> line:3:7 Complex
  |-TemplateTypeParmDecl 0x5558379392d0 <line:2:11, col:20> col:20 referenced typename depth 0 index 0 T
  `-CXXRecordDecl 0x555837939390 <line:3:1, line:23:1> line:3:7 class Complex definition
    |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
    | |-DefaultConstructor exists non_trivial user_provided
    | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
    | |-MoveConstructor exists simple trivial needs_implicit
    | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
    | |-MoveAssignment exists simple trivial needs_implicit
    | `-Destructor simple irrelevant trivial needs_implicit
    |-CXXRecordDecl 0x555837939670 <col:1, col:7> col:7 implicit referenced class Complex
    |-AccessSpecDecl 0x555837939700 <line:4:1, col:8> col:1 private
    |-FieldDecl 0x555837939738 <line:5:5, col:7> col:7 real 'T'
    |-FieldDecl 0x555837939798 <line:6:5, col:7> col:7 imag 'T'
    |-AccessSpecDecl 0x5558379397e8 <line:8:1, col:7> col:1 public
    |-CXXConstructorDecl 0x555837939898 <line:9:5, col:13> col:5 Complex<T> 'void ()'
    |-CXXConstructorDecl 0x555837939ae8 <line:10:5, col:21> col:5 Complex<T> 'void (T, T)'
    | |-ParmVarDecl 0x555837939958 <col:13, col:15> col:15 r 'T'
    | `-ParmVarDecl 0x5558379399d0 <col:18, col:20> col:20 i 'T'
    |-CXXMethodDecl 0x555837939c68 <line:12:5, col:17> col:7 getReal 'T () const'
    |-CXXMethodDecl 0x555837939d30 <line:13:5, col:22> col:7 getImaginary 'T () const'
    |-CXXMethodDecl 0x55583793a0a8 <line:15:5, col:51> col:16 operator+ 'Complex<T> (const Complex<T> &) const'
    | `-ParmVarDecl 0x555837939fa0 <col:26, col:44> col:44 other 'const Complex<T> &'
    |-CXXMethodDecl 0x555837957f78 <line:16:5, col:51> col:16 operator- 'Complex<T> (const Complex<T> &) const'
    | `-ParmVarDecl 0x555837957ea0 <col:26, col:44> col:44 other 'const Complex<T> &'
    |-CXXMethodDecl 0x555837958298 <line:17:5, col:51> col:16 operator* 'Complex<T> (const Complex<T> &) const'
    | `-ParmVarDecl 0x5558379581c0 <col:26, col:44> col:44 other 'const Complex<T> &'
    |-CXXMethodDecl 0x5558379585b8 <line:18:5, col:51> col:16 operator/ 'Complex<T> (const Complex<T> &) const'
    | `-ParmVarDecl 0x5558379584e0 <col:26, col:44> col:44 other 'const Complex<T> &'
    |-CXXMethodDecl 0x555837958858 <line:20:5, col:46> col:10 operator== 'bool (const Complex<T> &) const'
    | `-ParmVarDecl 0x555837958760 <col:21, col:39> col:39 other 'const Complex<T> &'
    `-CXXMethodDecl 0x555837958ac8 <line:21:5, col:46> col:10 operator!= 'bool (const Complex<T> &) const'
      `-ParmVarDecl 0x555837958a00 <col:21, col:39> col:39 other 'const Complex<T> &'
